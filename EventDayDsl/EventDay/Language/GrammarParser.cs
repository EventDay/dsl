//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\code\eventday\vNext\dsl\EventDayDsl\EventDay\Grammar.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace EventDayDsl.EventDay.Language {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, NS=8, ENUM=9, 
		ENTITY=10, DEFINE=11, DEFINE_STATE=12, CMD=13, COMMANDS=14, EVENT=15, 
		EVENTS=16, TERMINATE=17, COMMA=18, DOT=19, REQUIRED=20, OPTIONAL=21, IS=22, 
		EQUALS=23, IMPORT=24, MARK=25, MARKER=26, STRINGIFY=27, TELL=28, INTEGER=29, 
		ID=30, TO_STRING=31, MULTILINE_COMMENT=32, COMMENT=33, WS=34;
	public const int
		RULE_program = 0, RULE_importAssingment = 1, RULE_markerDefinition = 2, 
		RULE_stateDefinitionInterface = 3, RULE_stateDefinition = 4, RULE_state_name = 5, 
		RULE_namespaceAssignment = 6, RULE_namespace = 7, RULE_commandAssignment = 8, 
		RULE_eventAssignment = 9, RULE_messageDefinition = 10, RULE_entityDefinition = 11, 
		RULE_toString = 12, RULE_constantDefinitions = 13, RULE_constant = 14, 
		RULE_name = 15, RULE_optionalName = 16, RULE_type = 17, RULE_typeArgument = 18, 
		RULE_typeArguments = 19, RULE_marker = 20, RULE_markerList = 21, RULE_stateApplicationList = 22, 
		RULE_stateApplication = 23, RULE_argument = 24, RULE_typeModifier = 25, 
		RULE_argumentList = 26, RULE_enumDefinition = 27, RULE_enumMember = 28, 
		RULE_enumMemberValue = 29, RULE_enumMemberList = 30;
	public static readonly string[] ruleNames = {
		"program", "importAssingment", "markerDefinition", "stateDefinitionInterface", 
		"stateDefinition", "state_name", "namespaceAssignment", "namespace", "commandAssignment", 
		"eventAssignment", "messageDefinition", "entityDefinition", "toString", 
		"constantDefinitions", "constant", "name", "optionalName", "type", "typeArgument", 
		"typeArguments", "marker", "markerList", "stateApplicationList", "stateApplication", 
		"argument", "typeModifier", "argumentList", "enumDefinition", "enumMember", 
		"enumMemberValue", "enumMemberList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "':'", "'are'", "'const'", "'<'", "'>'", "'namespace'", 
		"'enum'", "'entity'", "'def'", "'state'", "'command'", "'commands'", "'event'", 
		"'events'", "';'", "','", "'.'", "'!'", "'?'", "'is'", "'='", "'import'", 
		"'mark'", "'marker'", "'text'", "'tell'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "NS", "ENUM", "ENTITY", 
		"DEFINE", "DEFINE_STATE", "CMD", "COMMANDS", "EVENT", "EVENTS", "TERMINATE", 
		"COMMA", "DOT", "REQUIRED", "OPTIONAL", "IS", "EQUALS", "IMPORT", "MARK", 
		"MARKER", "STRINGIFY", "TELL", "INTEGER", "ID", "TO_STRING", "MULTILINE_COMMENT", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public NamespaceAssignmentContext namespaceAssignment() {
			return GetRuleContext<NamespaceAssignmentContext>(0);
		}
		public ImportAssingmentContext[] importAssingment() {
			return GetRuleContexts<ImportAssingmentContext>();
		}
		public ImportAssingmentContext importAssingment(int i) {
			return GetRuleContext<ImportAssingmentContext>(i);
		}
		public StateDefinitionContext[] stateDefinition() {
			return GetRuleContexts<StateDefinitionContext>();
		}
		public StateDefinitionContext stateDefinition(int i) {
			return GetRuleContext<StateDefinitionContext>(i);
		}
		public EntityDefinitionContext[] entityDefinition() {
			return GetRuleContexts<EntityDefinitionContext>();
		}
		public EntityDefinitionContext entityDefinition(int i) {
			return GetRuleContext<EntityDefinitionContext>(i);
		}
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public CommandAssignmentContext[] commandAssignment() {
			return GetRuleContexts<CommandAssignmentContext>();
		}
		public CommandAssignmentContext commandAssignment(int i) {
			return GetRuleContext<CommandAssignmentContext>(i);
		}
		public EventAssignmentContext[] eventAssignment() {
			return GetRuleContexts<EventAssignmentContext>();
		}
		public EventAssignmentContext eventAssignment(int i) {
			return GetRuleContext<EventAssignmentContext>(i);
		}
		public MarkerDefinitionContext[] markerDefinition() {
			return GetRuleContexts<MarkerDefinitionContext>();
		}
		public MarkerDefinitionContext markerDefinition(int i) {
			return GetRuleContext<MarkerDefinitionContext>(i);
		}
		public MessageDefinitionContext[] messageDefinition() {
			return GetRuleContexts<MessageDefinitionContext>();
		}
		public MessageDefinitionContext messageDefinition(int i) {
			return GetRuleContext<MessageDefinitionContext>(i);
		}
		public EnumDefinitionContext[] enumDefinition() {
			return GetRuleContexts<EnumDefinitionContext>();
		}
		public EnumDefinitionContext enumDefinition(int i) {
			return GetRuleContext<EnumDefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IMPORT) {
				{
				{
				State = 62; importAssingment();
				}
				}
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 68; namespaceAssignment();
			State = 80;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << ENUM) | (1L << ENTITY) | (1L << DEFINE_STATE) | (1L << CMD) | (1L << COMMANDS) | (1L << EVENT) | (1L << EVENTS) | (1L << MARKER) | (1L << ID))) != 0)) {
				{
				State = 78;
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 69; stateDefinition();
					}
					break;

				case 2:
					{
					State = 70; entityDefinition();
					}
					break;

				case 3:
					{
					State = 71; constant();
					}
					break;

				case 4:
					{
					State = 72; commandAssignment();
					}
					break;

				case 5:
					{
					State = 73; eventAssignment();
					}
					break;

				case 6:
					{
					State = 74; stateDefinition();
					}
					break;

				case 7:
					{
					State = 75; markerDefinition();
					}
					break;

				case 8:
					{
					State = 76; messageDefinition();
					}
					break;

				case 9:
					{
					State = 77; enumDefinition();
					}
					break;
				}
				}
				State = 82;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAssingmentContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(GrammarParser.IMPORT, 0); }
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public ITerminalNode TERMINATE() { return GetToken(GrammarParser.TERMINATE, 0); }
		public ImportAssingmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAssingment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterImportAssingment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitImportAssingment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAssingment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAssingmentContext importAssingment() {
		ImportAssingmentContext _localctx = new ImportAssingmentContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_importAssingment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(IMPORT);
			State = 84; @namespace();
			State = 86;
			_la = _input.La(1);
			if (_la==TERMINATE) {
				{
				State = 85; Match(TERMINATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerDefinitionContext : ParserRuleContext {
		public ITerminalNode MARKER() { return GetToken(GrammarParser.MARKER, 0); }
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode TERMINATE() { return GetToken(GrammarParser.TERMINATE, 0); }
		public MarkerDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMarkerDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMarkerDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerDefinitionContext markerDefinition() {
		MarkerDefinitionContext _localctx = new MarkerDefinitionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_markerDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(MARKER);
			State = 89; Match(ID);
			State = 94;
			_la = _input.La(1);
			if (_la==T__0) {
				{
				State = 90; Match(T__0);
				State = 91; argumentList();
				State = 92; Match(T__1);
				}
			}

			State = 97;
			_la = _input.La(1);
			if (_la==TERMINATE) {
				{
				State = 96; Match(TERMINATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateDefinitionInterfaceContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public StateDefinitionInterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateDefinitionInterface; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStateDefinitionInterface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStateDefinitionInterface(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateDefinitionInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateDefinitionInterfaceContext stateDefinitionInterface() {
		StateDefinitionInterfaceContext _localctx = new StateDefinitionInterfaceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_stateDefinitionInterface);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateDefinitionContext : ParserRuleContext {
		public ITerminalNode DEFINE_STATE() { return GetToken(GrammarParser.DEFINE_STATE, 0); }
		public State_nameContext state_name() {
			return GetRuleContext<State_nameContext>(0);
		}
		public StateDefinitionInterfaceContext stateDefinitionInterface() {
			return GetRuleContext<StateDefinitionInterfaceContext>(0);
		}
		public ITerminalNode TERMINATE() { return GetToken(GrammarParser.TERMINATE, 0); }
		public StateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStateDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStateDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateDefinitionContext stateDefinition() {
		StateDefinitionContext _localctx = new StateDefinitionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_stateDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(DEFINE_STATE);
			State = 102; state_name();
			State = 105;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 103; Match(T__2);
				State = 104; stateDefinitionInterface();
				}
			}

			State = 108;
			_la = _input.La(1);
			if (_la==TERMINATE) {
				{
				State = 107; Match(TERMINATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class State_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public State_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterState_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitState_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitState_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public State_nameContext state_name() {
		State_nameContext _localctx = new State_nameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_state_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceAssignmentContext : ParserRuleContext {
		public ITerminalNode NS() { return GetToken(GrammarParser.NS, 0); }
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public ITerminalNode TERMINATE() { return GetToken(GrammarParser.TERMINATE, 0); }
		public NamespaceAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNamespaceAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNamespaceAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceAssignmentContext namespaceAssignment() {
		NamespaceAssignmentContext _localctx = new NamespaceAssignmentContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_namespaceAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(NS);
			State = 113; @namespace();
			State = 115;
			_la = _input.La(1);
			if (_la==TERMINATE) {
				{
				State = 114; Match(TERMINATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(GrammarParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(GrammarParser.ID, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(GrammarParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(GrammarParser.DOT, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(ID);
			State = 122;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 118; Match(DOT);
				State = 119; Match(ID);
				}
				}
				State = 124;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandAssignmentContext : ParserRuleContext {
		public ITerminalNode COMMANDS() { return GetToken(GrammarParser.COMMANDS, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public ITerminalNode TERMINATE() { return GetToken(GrammarParser.TERMINATE, 0); }
		public CommandAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCommandAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCommandAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandAssignmentContext commandAssignment() {
		CommandAssignmentContext _localctx = new CommandAssignmentContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_commandAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(COMMANDS);
			State = 126; Match(T__3);
			State = 127; type();
			State = 132;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 128; Match(COMMA);
				State = 129; type();
				}
				}
				State = 134;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 136;
			_la = _input.La(1);
			if (_la==TERMINATE) {
				{
				State = 135; Match(TERMINATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventAssignmentContext : ParserRuleContext {
		public ITerminalNode EVENTS() { return GetToken(GrammarParser.EVENTS, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public ITerminalNode TERMINATE() { return GetToken(GrammarParser.TERMINATE, 0); }
		public EventAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEventAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEventAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventAssignmentContext eventAssignment() {
		EventAssignmentContext _localctx = new EventAssignmentContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_eventAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(EVENTS);
			State = 139; Match(T__3);
			State = 140; type();
			State = 145;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 141; Match(COMMA);
				State = 142; type();
				}
				}
				State = 147;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 149;
			_la = _input.La(1);
			if (_la==TERMINATE) {
				{
				State = 148; Match(TERMINATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageDefinitionContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MarkerListContext markerList() {
			return GetRuleContext<MarkerListContext>(0);
		}
		public StateApplicationListContext[] stateApplicationList() {
			return GetRuleContexts<StateApplicationListContext>();
		}
		public StateApplicationListContext stateApplicationList(int i) {
			return GetRuleContext<StateApplicationListContext>(i);
		}
		public ToStringContext toString() {
			return GetRuleContext<ToStringContext>(0);
		}
		public ITerminalNode TERMINATE() { return GetToken(GrammarParser.TERMINATE, 0); }
		public ITerminalNode CMD() { return GetToken(GrammarParser.CMD, 0); }
		public ITerminalNode EVENT() { return GetToken(GrammarParser.EVENT, 0); }
		public MessageDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMessageDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMessageDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageDefinitionContext messageDefinition() {
		MessageDefinitionContext _localctx = new MessageDefinitionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_messageDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_la = _input.La(1);
			if (_la==CMD || _la==EVENT) {
				{
				State = 151;
				_la = _input.La(1);
				if ( !(_la==CMD || _la==EVENT) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
			}

			State = 154; type();
			State = 155; Match(T__0);
			State = 156; argumentList();
			State = 157; Match(T__1);
			State = 159;
			_la = _input.La(1);
			if (_la==MARK) {
				{
				State = 158; markerList();
				}
			}

			State = 164;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TELL) {
				{
				{
				State = 161; stateApplicationList();
				}
				}
				State = 166;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 168;
			_la = _input.La(1);
			if (_la==STRINGIFY) {
				{
				State = 167; toString();
				}
			}

			State = 171;
			_la = _input.La(1);
			if (_la==TERMINATE) {
				{
				State = 170; Match(TERMINATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDefinitionContext : ParserRuleContext {
		public ITerminalNode ENTITY() { return GetToken(GrammarParser.ENTITY, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MarkerListContext markerList() {
			return GetRuleContext<MarkerListContext>(0);
		}
		public ToStringContext toString() {
			return GetRuleContext<ToStringContext>(0);
		}
		public EntityDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEntityDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEntityDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDefinitionContext entityDefinition() {
		EntityDefinitionContext _localctx = new EntityDefinitionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_entityDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(ENTITY);
			State = 174; type();
			State = 175; Match(T__0);
			State = 176; argumentList();
			State = 177; Match(T__1);
			State = 179;
			_la = _input.La(1);
			if (_la==MARK) {
				{
				State = 178; markerList();
				}
			}

			State = 182;
			_la = _input.La(1);
			if (_la==STRINGIFY) {
				{
				State = 181; toString();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToStringContext : ParserRuleContext {
		public ITerminalNode STRINGIFY() { return GetToken(GrammarParser.STRINGIFY, 0); }
		public ITerminalNode TO_STRING() { return GetToken(GrammarParser.TO_STRING, 0); }
		public ToStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterToString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitToString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToStringContext toString() {
		ToStringContext _localctx = new ToStringContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_toString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(STRINGIFY);
			State = 185; Match(TO_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefinitionsContext : ParserRuleContext {
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public ConstantDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterConstantDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitConstantDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefinitionsContext constantDefinitions() {
		ConstantDefinitionsContext _localctx = new ConstantDefinitionsContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_constantDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__4) {
				{
				{
				State = 187; constant();
				}
				}
				State = 192;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(GrammarParser.EQUALS, 0); }
		public ITerminalNode IS() { return GetToken(GrammarParser.IS, 0); }
		public OptionalNameContext optionalName() {
			return GetRuleContext<OptionalNameContext>(0);
		}
		public ITerminalNode TERMINATE() { return GetToken(GrammarParser.TERMINATE, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(T__4);
			State = 194; name();
			State = 195;
			_la = _input.La(1);
			if ( !(_la==IS || _la==EQUALS) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			State = 196; type();
			State = 198;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 197; optionalName();
				}
				break;
			}
			State = 201;
			_la = _input.La(1);
			if (_la==TERMINATE) {
				{
				State = 200; Match(TERMINATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalNameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public OptionalNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOptionalName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOptionalName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalNameContext optionalName() {
		OptionalNameContext _localctx = new OptionalNameContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_optionalName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeModifierContext typeModifier() {
			return GetRuleContext<TypeModifierContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(ID);
			State = 209;
			_la = _input.La(1);
			if (_la==T__5) {
				{
				State = 208; typeArguments();
				}
			}

			State = 212;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 211; typeModifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_typeArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(T__5);
			State = 217; typeArgument();
			State = 223;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__5 || _la==COMMA) {
				{
				State = 221;
				switch (_input.La(1)) {
				case COMMA:
					{
					State = 218; Match(COMMA);
					State = 219; typeArgument();
					}
					break;
				case T__5:
					{
					State = 220; typeArguments();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 225;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 226; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public MarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_marker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerContext marker() {
		MarkerContext _localctx = new MarkerContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_marker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerListContext : ParserRuleContext {
		public ITerminalNode MARK() { return GetToken(GrammarParser.MARK, 0); }
		public MarkerContext[] marker() {
			return GetRuleContexts<MarkerContext>();
		}
		public MarkerContext marker(int i) {
			return GetRuleContext<MarkerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public MarkerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMarkerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMarkerList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerListContext markerList() {
		MarkerListContext _localctx = new MarkerListContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_markerList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(MARK);
			State = 231; marker();
			State = 236;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 232; Match(COMMA);
				State = 233; marker();
				}
				}
				State = 238;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateApplicationListContext : ParserRuleContext {
		public ITerminalNode TELL() { return GetToken(GrammarParser.TELL, 0); }
		public StateApplicationContext[] stateApplication() {
			return GetRuleContexts<StateApplicationContext>();
		}
		public StateApplicationContext stateApplication(int i) {
			return GetRuleContext<StateApplicationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public StateApplicationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateApplicationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStateApplicationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStateApplicationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateApplicationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateApplicationListContext stateApplicationList() {
		StateApplicationListContext _localctx = new StateApplicationListContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_stateApplicationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(TELL);
			State = 240; stateApplication();
			State = 245;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 241; Match(COMMA);
				State = 242; stateApplication();
				}
				}
				State = 247;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateApplicationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public StateApplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateApplication; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStateApplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStateApplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateApplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateApplicationContext stateApplication() {
		StateApplicationContext _localctx = new StateApplicationContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_stateApplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeModifierContext typeModifier() {
			return GetRuleContext<TypeModifierContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; type();
			State = 252;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 251; name();
				}
				break;
			}
			State = 255;
			_la = _input.La(1);
			if (_la==OPTIONAL) {
				{
				State = 254; typeModifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModifierContext : ParserRuleContext {
		public ITerminalNode OPTIONAL() { return GetToken(GrammarParser.OPTIONAL, 0); }
		public TypeModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTypeModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTypeModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeModifierContext typeModifier() {
		TypeModifierContext _localctx = new TypeModifierContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_typeModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(OPTIONAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 259; argument();
				}
				}
				State = 264;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 269;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 265; Match(COMMA);
				State = 266; argument();
				}
				}
				State = 271;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(GrammarParser.ENUM, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public EnumMemberListContext enumMemberList() {
			return GetRuleContext<EnumMemberListContext>(0);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_enumDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(ENUM);
			State = 273; type();
			State = 274; Match(T__0);
			State = 275; enumMemberList();
			State = 276; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EnumMemberValueContext enumMemberValue() {
			return GetRuleContext<EnumMemberValueContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_enumMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; name();
			State = 281;
			_la = _input.La(1);
			if (_la==EQUALS) {
				{
				State = 279; Match(EQUALS);
				State = 280; enumMemberValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberValueContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(GrammarParser.INTEGER, 0); }
		public EnumMemberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEnumMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEnumMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberValueContext enumMemberValue() {
		EnumMemberValueContext _localctx = new EnumMemberValueContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_enumMemberValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberListContext : ParserRuleContext {
		public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public EnumMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEnumMemberList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEnumMemberList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberListContext enumMemberList() {
		EnumMemberListContext _localctx = new EnumMemberListContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_enumMemberList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 285; enumMember();
				}
				}
				State = 290;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 295;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 291; Match(COMMA);
				State = 292; enumMember();
				}
				}
				State = 297;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3$\x12D\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x3\x2"+
		"\a\x2\x42\n\x2\f\x2\xE\x2\x45\v\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\a\x2Q\n\x2\f\x2\xE\x2T\v\x2\x3\x3\x3\x3\x3\x3"+
		"\x5\x3Y\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x61\n\x4\x3\x4"+
		"\x5\x4\x64\n\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6l\n\x6\x3\x6"+
		"\x5\x6o\n\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x5\bv\n\b\x3\t\x3\t\x3\t\a\t{\n"+
		"\t\f\t\xE\t~\v\t\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\x85\n\n\f\n\xE\n\x88\v\n"+
		"\x3\n\x5\n\x8B\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x92\n\v\f\v\xE\v\x95\v"+
		"\v\x3\v\x5\v\x98\n\v\x3\f\x5\f\x9B\n\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xA2"+
		"\n\f\x3\f\a\f\xA5\n\f\f\f\xE\f\xA8\v\f\x3\f\x5\f\xAB\n\f\x3\f\x5\f\xAE"+
		"\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xB6\n\r\x3\r\x5\r\xB9\n\r\x3\xE"+
		"\x3\xE\x3\xE\x3\xF\a\xF\xBF\n\xF\f\xF\xE\xF\xC2\v\xF\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x5\x10\xC9\n\x10\x3\x10\x5\x10\xCC\n\x10\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x13\x3\x13\x5\x13\xD4\n\x13\x3\x13\x5\x13\xD7\n"+
		"\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\xE0\n\x15"+
		"\f\x15\xE\x15\xE3\v\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\a\x17\xED\n\x17\f\x17\xE\x17\xF0\v\x17\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\a\x18\xF6\n\x18\f\x18\xE\x18\xF9\v\x18\x3\x19\x3\x19\x3\x1A\x3\x1A"+
		"\x5\x1A\xFF\n\x1A\x3\x1A\x5\x1A\x102\n\x1A\x3\x1B\x3\x1B\x3\x1C\a\x1C"+
		"\x107\n\x1C\f\x1C\xE\x1C\x10A\v\x1C\x3\x1C\x3\x1C\a\x1C\x10E\n\x1C\f\x1C"+
		"\xE\x1C\x111\v\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x5\x1E\x11C\n\x1E\x3\x1F\x3\x1F\x3 \a \x121\n \f \xE \x124"+
		"\v \x3 \x3 \a \x128\n \f \xE \x12B\v \x3 \x2\x2\x2!\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2"+
		"\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38"+
		"\x2:\x2<\x2>\x2\x2\x4\x4\x2\xF\xF\x11\x11\x3\x2\x18\x19\x139\x2\x43\x3"+
		"\x2\x2\x2\x4U\x3\x2\x2\x2\x6Z\x3\x2\x2\x2\b\x65\x3\x2\x2\x2\ng\x3\x2\x2"+
		"\x2\fp\x3\x2\x2\x2\xEr\x3\x2\x2\x2\x10w\x3\x2\x2\x2\x12\x7F\x3\x2\x2\x2"+
		"\x14\x8C\x3\x2\x2\x2\x16\x9A\x3\x2\x2\x2\x18\xAF\x3\x2\x2\x2\x1A\xBA\x3"+
		"\x2\x2\x2\x1C\xC0\x3\x2\x2\x2\x1E\xC3\x3\x2\x2\x2 \xCD\x3\x2\x2\x2\"\xCF"+
		"\x3\x2\x2\x2$\xD1\x3\x2\x2\x2&\xD8\x3\x2\x2\x2(\xDA\x3\x2\x2\x2*\xE6\x3"+
		"\x2\x2\x2,\xE8\x3\x2\x2\x2.\xF1\x3\x2\x2\x2\x30\xFA\x3\x2\x2\x2\x32\xFC"+
		"\x3\x2\x2\x2\x34\x103\x3\x2\x2\x2\x36\x108\x3\x2\x2\x2\x38\x112\x3\x2"+
		"\x2\x2:\x118\x3\x2\x2\x2<\x11D\x3\x2\x2\x2>\x122\x3\x2\x2\x2@\x42\x5\x4"+
		"\x3\x2\x41@\x3\x2\x2\x2\x42\x45\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x44"+
		"\x3\x2\x2\x2\x44\x46\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x46R\x5\xE\b\x2G"+
		"Q\x5\n\x6\x2HQ\x5\x18\r\x2IQ\x5\x1E\x10\x2JQ\x5\x12\n\x2KQ\x5\x14\v\x2"+
		"LQ\x5\n\x6\x2MQ\x5\x6\x4\x2NQ\x5\x16\f\x2OQ\x5\x38\x1D\x2PG\x3\x2\x2\x2"+
		"PH\x3\x2\x2\x2PI\x3\x2\x2\x2PJ\x3\x2\x2\x2PK\x3\x2\x2\x2PL\x3\x2\x2\x2"+
		"PM\x3\x2\x2\x2PN\x3\x2\x2\x2PO\x3\x2\x2\x2QT\x3\x2\x2\x2RP\x3\x2\x2\x2"+
		"RS\x3\x2\x2\x2S\x3\x3\x2\x2\x2TR\x3\x2\x2\x2UV\a\x1A\x2\x2VX\x5\x10\t"+
		"\x2WY\a\x13\x2\x2XW\x3\x2\x2\x2XY\x3\x2\x2\x2Y\x5\x3\x2\x2\x2Z[\a\x1C"+
		"\x2\x2[`\a \x2\x2\\]\a\x3\x2\x2]^\x5\x36\x1C\x2^_\a\x4\x2\x2_\x61\x3\x2"+
		"\x2\x2`\\\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x63\x3\x2\x2\x2\x62\x64\a\x13"+
		"\x2\x2\x63\x62\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\a\x3\x2\x2\x2\x65\x66"+
		"\a \x2\x2\x66\t\x3\x2\x2\x2gh\a\xE\x2\x2hk\x5\f\a\x2ij\a\x5\x2\x2jl\x5"+
		"\b\x5\x2ki\x3\x2\x2\x2kl\x3\x2\x2\x2ln\x3\x2\x2\x2mo\a\x13\x2\x2nm\x3"+
		"\x2\x2\x2no\x3\x2\x2\x2o\v\x3\x2\x2\x2pq\a \x2\x2q\r\x3\x2\x2\x2rs\a\n"+
		"\x2\x2su\x5\x10\t\x2tv\a\x13\x2\x2ut\x3\x2\x2\x2uv\x3\x2\x2\x2v\xF\x3"+
		"\x2\x2\x2w|\a \x2\x2xy\a\x15\x2\x2y{\a \x2\x2zx\x3\x2\x2\x2{~\x3\x2\x2"+
		"\x2|z\x3\x2\x2\x2|}\x3\x2\x2\x2}\x11\x3\x2\x2\x2~|\x3\x2\x2\x2\x7F\x80"+
		"\a\x10\x2\x2\x80\x81\a\x6\x2\x2\x81\x86\x5$\x13\x2\x82\x83\a\x14\x2\x2"+
		"\x83\x85\x5$\x13\x2\x84\x82\x3\x2\x2\x2\x85\x88\x3\x2\x2\x2\x86\x84\x3"+
		"\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x8A\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2"+
		"\x89\x8B\a\x13\x2\x2\x8A\x89\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x13\x3"+
		"\x2\x2\x2\x8C\x8D\a\x12\x2\x2\x8D\x8E\a\x6\x2\x2\x8E\x93\x5$\x13\x2\x8F"+
		"\x90\a\x14\x2\x2\x90\x92\x5$\x13\x2\x91\x8F\x3\x2\x2\x2\x92\x95\x3\x2"+
		"\x2\x2\x93\x91\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95"+
		"\x93\x3\x2\x2\x2\x96\x98\a\x13\x2\x2\x97\x96\x3\x2\x2\x2\x97\x98\x3\x2"+
		"\x2\x2\x98\x15\x3\x2\x2\x2\x99\x9B\t\x2\x2\x2\x9A\x99\x3\x2\x2\x2\x9A"+
		"\x9B\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9D\x5$\x13\x2\x9D\x9E\a\x3\x2"+
		"\x2\x9E\x9F\x5\x36\x1C\x2\x9F\xA1\a\x4\x2\x2\xA0\xA2\x5,\x17\x2\xA1\xA0"+
		"\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA6\x3\x2\x2\x2\xA3\xA5\x5.\x18\x2"+
		"\xA4\xA3\x3\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA7\x3"+
		"\x2\x2\x2\xA7\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9\xAB\x5\x1A\xE\x2"+
		"\xAA\xA9\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xAE\a"+
		"\x13\x2\x2\xAD\xAC\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\x17\x3\x2\x2\x2"+
		"\xAF\xB0\a\f\x2\x2\xB0\xB1\x5$\x13\x2\xB1\xB2\a\x3\x2\x2\xB2\xB3\x5\x36"+
		"\x1C\x2\xB3\xB5\a\x4\x2\x2\xB4\xB6\x5,\x17\x2\xB5\xB4\x3\x2\x2\x2\xB5"+
		"\xB6\x3\x2\x2\x2\xB6\xB8\x3\x2\x2\x2\xB7\xB9\x5\x1A\xE\x2\xB8\xB7\x3\x2"+
		"\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\x19\x3\x2\x2\x2\xBA\xBB\a\x1D\x2\x2\xBB"+
		"\xBC\a!\x2\x2\xBC\x1B\x3\x2\x2\x2\xBD\xBF\x5\x1E\x10\x2\xBE\xBD\x3\x2"+
		"\x2\x2\xBF\xC2\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1"+
		"\x1D\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC4\a\a\x2\x2\xC4\xC5\x5 \x11"+
		"\x2\xC5\xC6\t\x3\x2\x2\xC6\xC8\x5$\x13\x2\xC7\xC9\x5\"\x12\x2\xC8\xC7"+
		"\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCB\x3\x2\x2\x2\xCA\xCC\a\x13\x2"+
		"\x2\xCB\xCA\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\x1F\x3\x2\x2\x2\xCD\xCE"+
		"\a \x2\x2\xCE!\x3\x2\x2\x2\xCF\xD0\a \x2\x2\xD0#\x3\x2\x2\x2\xD1\xD3\a"+
		" \x2\x2\xD2\xD4\x5(\x15\x2\xD3\xD2\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4"+
		"\xD6\x3\x2\x2\x2\xD5\xD7\x5\x34\x1B\x2\xD6\xD5\x3\x2\x2\x2\xD6\xD7\x3"+
		"\x2\x2\x2\xD7%\x3\x2\x2\x2\xD8\xD9\a \x2\x2\xD9\'\x3\x2\x2\x2\xDA\xDB"+
		"\a\b\x2\x2\xDB\xE1\x5&\x14\x2\xDC\xDD\a\x14\x2\x2\xDD\xE0\x5&\x14\x2\xDE"+
		"\xE0\x5(\x15\x2\xDF\xDC\x3\x2\x2\x2\xDF\xDE\x3\x2\x2\x2\xE0\xE3\x3\x2"+
		"\x2\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE4\x3\x2\x2\x2\xE3"+
		"\xE1\x3\x2\x2\x2\xE4\xE5\a\t\x2\x2\xE5)\x3\x2\x2\x2\xE6\xE7\a \x2\x2\xE7"+
		"+\x3\x2\x2\x2\xE8\xE9\a\x1B\x2\x2\xE9\xEE\x5*\x16\x2\xEA\xEB\a\x14\x2"+
		"\x2\xEB\xED\x5*\x16\x2\xEC\xEA\x3\x2\x2\x2\xED\xF0\x3\x2\x2\x2\xEE\xEC"+
		"\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF-\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2"+
		"\xF1\xF2\a\x1E\x2\x2\xF2\xF7\x5\x30\x19\x2\xF3\xF4\a\x14\x2\x2\xF4\xF6"+
		"\x5\x30\x19\x2\xF5\xF3\x3\x2\x2\x2\xF6\xF9\x3\x2\x2\x2\xF7\xF5\x3\x2\x2"+
		"\x2\xF7\xF8\x3\x2\x2\x2\xF8/\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xFA\xFB\a"+
		" \x2\x2\xFB\x31\x3\x2\x2\x2\xFC\xFE\x5$\x13\x2\xFD\xFF\x5 \x11\x2\xFE"+
		"\xFD\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x101\x3\x2\x2\x2\x100\x102\x5"+
		"\x34\x1B\x2\x101\x100\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x33\x3\x2"+
		"\x2\x2\x103\x104\a\x17\x2\x2\x104\x35\x3\x2\x2\x2\x105\x107\x5\x32\x1A"+
		"\x2\x106\x105\x3\x2\x2\x2\x107\x10A\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2"+
		"\x108\x109\x3\x2\x2\x2\x109\x10F\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B"+
		"\x10C\a\x14\x2\x2\x10C\x10E\x5\x32\x1A\x2\x10D\x10B\x3\x2\x2\x2\x10E\x111"+
		"\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x37\x3\x2"+
		"\x2\x2\x111\x10F\x3\x2\x2\x2\x112\x113\a\v\x2\x2\x113\x114\x5$\x13\x2"+
		"\x114\x115\a\x3\x2\x2\x115\x116\x5> \x2\x116\x117\a\x4\x2\x2\x117\x39"+
		"\x3\x2\x2\x2\x118\x11B\x5 \x11\x2\x119\x11A\a\x19\x2\x2\x11A\x11C\x5<"+
		"\x1F\x2\x11B\x119\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C;\x3\x2\x2\x2"+
		"\x11D\x11E\a\x1F\x2\x2\x11E=\x3\x2\x2\x2\x11F\x121\x5:\x1E\x2\x120\x11F"+
		"\x3\x2\x2\x2\x121\x124\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2\x122\x123\x3"+
		"\x2\x2\x2\x123\x129\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x125\x126\a\x14"+
		"\x2\x2\x126\x128\x5:\x1E\x2\x127\x125\x3\x2\x2\x2\x128\x12B\x3\x2\x2\x2"+
		"\x129\x127\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A?\x3\x2\x2\x2\x12B\x129"+
		"\x3\x2\x2\x2\'\x43PRX`\x63knu|\x86\x8A\x93\x97\x9A\xA1\xA6\xAA\xAD\xB5"+
		"\xB8\xC0\xC8\xCB\xD3\xD6\xDF\xE1\xEE\xF7\xFE\x101\x108\x10F\x11B\x122"+
		"\x129";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace EventDayDsl.EventDay.Language
